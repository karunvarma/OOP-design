// design pattern :- decorator
#include<iostream>
using namespace std;


class Coffee
{
public:
	virtual double getCost() = 0;
	virtual string getIngredients() = 0;
};

class SimpleCoffee :public Coffee
{
public:

	double getCost()
	{
		return 2;
	}

	string getIngredients()
	{
		return "Plain Coffee";
	}
};

class CoffeeDecorator:public Coffee
{
	
	protected:
	Coffee *decoratedCoffee;
	
	public:
	
	CoffeeDecorator(Coffee *Coffee):decoratedCoffee(Coffee){
	
	}
	
	double getCost()
	{
		return decoratedCoffee->getCost();	
	}
	string getIngredients()
	{
		return decoratedCoffee->getIngredients();
	}
};


class WithMilk :public CoffeeDecorator
{
public:

	WithMilk(Coffee *coffee):CoffeeDecorator(coffee){
		
		// cout<<"decorator point to Basic coffeee"<<endl;
	}

	double getCost()
	{
		return decoratedCoffee->getCost() + 0.5;
	}

	string getIngredients()
	{
		return CoffeeDecorator::getIngredients() + ", Milk";
	}
};


class WithSugar:public CoffeeDecorator
{
	public:
	WithSugar(Coffee *Coffee):CoffeeDecorator(Coffee){
		// cout<<"decorator point to milk"<<endl;
	}
	
	double getCost()
	{
		return CoffeeDecorator::getCost()+1.0;
	}
	
	string getIngredients()
	{
		return decoratedCoffee->getIngredients()+", Sugar";
	}
};

int main()
{
	Coffee *obj= new SimpleCoffee();
	Coffee  *Coffee= new WithSugar( new WithMilk(obj) );
	cout<<Coffee->getIngredients();
	

}
